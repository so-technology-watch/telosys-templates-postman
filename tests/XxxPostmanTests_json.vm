#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
## Set some values for the tests
#set ( $testValues =  [] )
#foreach ( $attrib in $entity.attributes )
#set( $intString = $foreach.count )
#if ( $attrib.type == "int" || $attrib.type == "Integer" || $attrib.type == "Short" ) 
#set ( $val = $testValues.add(77) )
#elseif ( $attrib.type == "BigDecimal" )
#set ( $val = $testValues.add(99.99) )
#elseif ( $attrib.type == "boolean" )
#set ( $val = $testValues.add(true) )
#elseif ( $attrib.type == "Date" )
#set ( $val = $testValues.add('2012-04-23T18:25:43.511Z') )
#else
#set ( $val = $testValues.add('lorem ipsum') )
#end
## end if
#end
## end foreach
##
## Prepare rawJsonRequest (for Create & Update POST requests)
#set ( $rawJsonRequest = '' )
#foreach( $attrib in $entity.attributes )
#if ( $foreach.count > 1 )
#set ( $rawJsonRequest = $rawJsonRequest + ',' )
#end
#if ( $attrib.type == "int" || $attrib.type == "Integer" || $attrib.type == "BigDecimal" || $attrib.type == "boolean" )
#set ( $rawJsonRequest = $rawJsonRequest + '\n\t\"' + $uncapitalizedEntityName + '_' + $attrib.name + '\": ' + $testValues[$foreach.index] )
#else 
#set ( $rawJsonRequest = $rawJsonRequest + '\n\t\"' + $uncapitalizedEntityName + '_' + $attrib.name + '\": ' + '\"' + $testValues[$foreach.index] + '\"' )
#end
#end
## end foreach
##
## Prepare GET params (Entity primary key(s))
#set ( $getParams = '' )
#foreach ( $key in $entity.keyAttributes )
#if ( $foreach.count > 1 )
#set ( $getParams = $getParams + '/' )
#end
#set ( $getParams = $getParams + $testValues[$foreach.index] )
#end
## end foreach
{
	"variables": [],
	"info": {
		"name": "$entity.name Telosys 3 REST API Tests",
		"description": "Telosys Tools 3 Node.JS Template $entity.name entity generated API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create a $uncapitalizedEntityName",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 400",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 400\"] = responseCode.code === 400;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"    tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 400\"] = jsonData.errorCode === 400;",
							"        }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Invalid arguments'\"] = jsonData.message === \"Invalid arguments\";",
							"        }",
							"    } else {",
## loop through entity attributes
#foreach( $attrib in $entity.attributes )
#set ( $firstPart = '							"        tests[\"Object value '+$uncapitalizedEntityName+'_'+$attrib.name+' is correct\"] = ')
#if ( $attrib.type == "int" || $attrib.type == "Integer" || $attrib.type == "Short" ) 
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === 77;",')
#elseif ( $attrib.type == "BigDecimal" )
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"99.99\";",')
#elseif ( $attrib.type == "boolean" )
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === true;",')
#elseif ( $attrib.type == "Date" )
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"2012-04-23T18:25:43.511Z\";",')
#else
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"lorem ipsum\";",')
#end
## end if
${firstPart}${secondPart}
#end
## end foreach
							"}"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/$uncapitalizedEntityName/",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{$rawJsonRequest\n}"
				},
				"description": "Create a $uncapitalizedEntityName"
			},
			"response": []
		},
		{
			"name": "Get one $uncapitalizedEntityName",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
## loop through entity attributes
#foreach( $attrib in $entity.attributes )
#set ( $firstPart = '							"        tests[\"Object value '+$uncapitalizedEntityName+'_'+$attrib.name+' is correct\"] = ')
#if ( $attrib.type == "int" || $attrib.type == "Integer" || $attrib.type == "Short" ) 
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === 77;",')
#elseif ( $attrib.type == "BigDecimal" )
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"99.99\";",')
#elseif ( $attrib.type == "boolean" )
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === true;",')
#elseif ( $attrib.type == "Date" )
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"2012-04-23T18:25:43.511Z\";",')
#else
#set ( $secondPart = 'jsonData.'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"lorem ipsum\";",')
#end
## end if
${firstPart}${secondPart}
#end
## end foreach
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/$uncapitalizedEntityName/$getParams",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "Get one $uncapitalizedEntityName"
			},
			"response": []
		},
		{
			"name": "Check if one $uncapitalizedEntityName exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
							"        tests[\"Returned boolean is true\"] = jsonData === true;",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/$uncapitalizedEntityName/exists/$getParams",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "Check if one $uncapitalizedEntityName exists"
			},
			"response": []
		},
		{
			"name": "Get all $uncapitalizedEntityName",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
							"       for (var i = 0; i < jsonData.length; i++) {",
## loop through entity attributes
#foreach( $attrib in $entity.attributes )
#set ( $firstPart = '							"        tests[\"Object number \" + i + \" Value '+$uncapitalizedEntityName+'_'+$attrib.name+' is correct\"] = ')
#if ( $attrib.type == "int" || $attrib.type == "Integer" || $attrib.type == "Short" ) 
#set ( $secondPart = 'jsonData[i].'+$uncapitalizedEntityName+'_'+$attrib.name+' === 77;",')
#elseif ( $attrib.type == "BigDecimal" )
#set ( $secondPart = 'jsonData[i].'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"99.99\";",')
#elseif ( $attrib.type == "boolean" )
#set ( $secondPart = 'jsonData[i].'+$uncapitalizedEntityName+'_'+$attrib.name+' === true;",')
#elseif ( $attrib.type == "Date" )
#set ( $secondPart = 'jsonData[i].'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"2012-04-23T18:25:43.511Z\";",')
#else
#set ( $secondPart = 'jsonData[i].'+$uncapitalizedEntityName+'_'+$attrib.name+' === \"lorem ipsum\";",')
#end
## end if
${firstPart}${secondPart}
#end
## end foreach
							"    }",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/$uncapitalizedEntityName/",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": "Get all $uncapitalizedEntityName"
			},
			"response": []
		},
		{
			"name": "Count all $uncapitalizedEntityName",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
							"        tests[\"Returned value count is an integer\"] = Number.isInteger(jsonData.count);",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/$uncapitalizedEntityName/count/",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "Count all $uncapitalizedEntityName"
			},
			"response": []
		},
		{
			"name": "Edit a $uncapitalizedEntityName",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Check the content of every value",
							"if (jsonData.errorCode === 200) {",
							"    tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"    } else {",
							"        tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"}",
							"if (jsonData.message === \"Success\") {",
							"    tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"    } else {",
							"        tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"}"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/$uncapitalizedEntityName/$getParams",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{$rawJsonRequest\n}"
				},
				"description": "Edit a $uncapitalizedEntityName"
			},
			"response": []
		},
		{
			"name": "Delete a $uncapitalizedEntityName",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Check the content of every value",
							"if (jsonData.errorCode === 200) {",
							"    tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"    } else {",
							"        tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"}",
							"if (jsonData.message === \"Success\") {",
							"    tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"    } else {",
							"        tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"}"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/$uncapitalizedEntityName/$getParams",
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": "Delete a $uncapitalizedEntityName"
			},
			"response": []
		}
	]
}